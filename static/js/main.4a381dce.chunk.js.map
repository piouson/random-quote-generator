{"version":3,"sources":["QuoteBox.js","QuoteControls.js","TweetQuote.js","Quote.js","QuoteHeader.js","api.js","App.js","serviceWorker.js","index.js"],"names":["QuoteBox","props","id","children","QuoteControls","type","onClick","handleClick","disabled","busy","text","getTweetLink","quote","obj","query","encodeURIComponent","author","url","window","location","href","hashtags","via","Object","keys","reduce","a","e","push","join","TweetQuote","link","tweet","target","rel","className","icon","faTwitter","color","Quote","QuoteHeader","useQuotesApi","key","useState","JSON","parse","localStorage","getItem","value","setValue","useEffect","setItem","stringify","useLocalStorage","setQuote","error","setError","loading","setLoading","useCallback","Promise","resolve","setTimeout","fetch","response","ok","status","json","result","message","App","fetchQuotes","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.4a381dce.chunk.js","sourcesContent":["import React from 'react';\n\nfunction QuoteBox(props) {\n  return (\n    <div id=\"quote-box\">\n      {props.children}\n    </div>\n  );\n}\n\nexport default QuoteBox;\n","import React from 'react';\n\nfunction QuoteControls(props) {\n  return (\n    <div id=\"quote-controls\">\n      {props.children}\n      <button\n        id=\"new-quote\"\n        type=\"button\"\n        onClick={props.handleClick}\n        disabled={props.busy} >{props.text}</button>\n    </div>\n  );\n}\n\nexport default QuoteControls;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\n\nconst TWEET_URI = 'https://twitter.com/intent/tweet?';\n\nfunction getQueryString(obj) {\n  return Object.keys(obj).reduce((a, e) => {\n    a.push(`${e}=${obj[e]}`);\n    return a;\n  }, []).join(\"&\");\n}\n\nfunction getTweetLink(quote) {\n  if (!quote) return '';\n\n  const query = {\n    text: encodeURIComponent(`\"${quote.quote}\" ${quote.author}.`),\n    url: window.location.href,\n    hashtags: encodeURIComponent(\"quotes, codingQuotes\"),\n    via: \"piouson_code\"\n  }\n  return `${TWEET_URI}${getQueryString(query)}`;\n}\n\nfunction TweetQuote(props) {\n  const link = getTweetLink(props.tweet)\n  return (\n    <div>\n      <a id=\"tweet-quote\" href={link} \n        target=\"_blank\" rel=\"noopener noreferrer\">\n        <FontAwesomeIcon className=\"tweet-icon\" icon={faTwitter} color=\"green\" />\n      </a>\n    </div>\n  );\n}\n\nexport default TweetQuote;\n","import React from 'react';\n\nfunction Quote(props) {\n  return (\n    <blockquote>\n      <q id=\"text\">\n        {props.text}\n      </q>\n      <footer id=\"author\">\n        {props.author}\n      </footer>\n    </blockquote>\n  );\n}\n\nexport default Quote;\n","import React from 'react';\n\nfunction QuoteHeader(props) {\n  return (\n    <div id=\"quote-header\">\n      <h1>{props.text}</h1>\n    </div>\n  );\n}\n\nexport default QuoteHeader;\n","import { useState, useEffect, useCallback } from 'react';\n\nconst quotesApi = 'http://quotes.stormconsultancy.co.uk/random.json';\n\nconst useLocalStorage = (key) => {\n  const [value, setValue] = useState(\n    JSON.parse(localStorage.getItem(key))\n  );\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [value, key]);\n\n  return [value, setValue];\n};\n\nconst useQuotesApi = () => {\n  const [quote, setQuote] = useLocalStorage('quote');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const fetchQuotes = useCallback(async () => {\n    setError('');\n    setLoading(true);\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    try {\n      const response = await fetch(quotesApi);\n      if (!response.ok) {\n        setError(`HTTP Error: Status: ${response.status}!`);\n      }\n      else {\n        const result = await response.json();\n        setQuote(result);\n      }\n    } catch (error) {\n      setError(`HTTP Error: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [setQuote]);\n\n  return [{quote, loading, error}, fetchQuotes]\n}\n\nexport default useQuotesApi;","import React, { useEffect } from 'react';\nimport './App.css';\nimport QuoteBox from './QuoteBox';\nimport QuoteControls from './QuoteControls';\nimport TweetQuote from './TweetQuote';\nimport Quote from './Quote';\nimport QuoteHeader from './QuoteHeader';\nimport useQuotesApi from './api';\n\nfunction App() {\n  const [{quote, loading, error}, fetchQuotes] = useQuotesApi();\n\n  useEffect(() => {\n    if (!quote) {\n      fetchQuotes();\n    }\n  }, [quote, fetchQuotes]);\n\n  return (\n    <div id=\"App\">\n      <div id=\"container\">\n        <QuoteHeader text=\"Coding Quotes\" />\n        <QuoteBox>\n          {error && <p>{error}</p>}\n          {loading ? (\n            <p>Loading...</p>\n          ) : (\n            quote && (\n              <Quote\n                text={quote.quote}\n                author={quote.author} />\n            )\n          )}\n        </QuoteBox>\n        <QuoteControls handleClick={fetchQuotes} busy={loading} text=\"New Quote\">\n          <TweetQuote tweet={quote} />\n        </QuoteControls>\n      </div>\n      <a id=\"creator\"\n        href=\"https://piouson.github.io/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\">by piouson\n      </a>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}